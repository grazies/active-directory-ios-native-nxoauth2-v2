{
  "name": "Active-directory-ios-native-nxoauth2-v2",
  "tagline": "Demonstrates how you can use a third party library like nxoauth2 to build an iOS application that authenticates Microsoft identity users to our new v2 (converged) identity service and calls a web API using OAuth 2.0 access tokens.",
  "body": "**NOTE regarding iOS 9:**\r\n\r\nApple has released iOS 9 which includes support for App Transport Security (ATS). ATS restricts apps from accessing the internet unless they meet several security requirements incuding TLS 1.2 and SHA-256. While Microsoft's APIs support these standards some third party APIs and content delivery networks we use have yet to be upgraded. This means that any app that relies on Azure Active Directory or Microsoft Accounts will fail when compiled with iOS 9. For now our recommendation is to disable ATS, which reverts to iOS 8 functionality. Please refer to this [technote from Apple](https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/) for more informtaion.\r\n\r\n----\r\n\r\nAzure AD provides the Active Directory Authentication Library, or ADAL, for iOS clients that need to access protected resources.  ADAL’s sole purpose in life is to make it easy for your app to get access tokens.  To demonstrate just how easy it is, here we’ll build a Objective C To-Do List application that:\r\n\r\n-\tGets access tokens for calling the Azure AD Graph API using the [OAuth 2.0 authentication protocol](https://msdn.microsoft.com/library/azure/dn645545.aspx).\r\n-\tSearches a directory for users with a given alias.\r\n\r\nTo build the complete working application, you’ll need to:\r\n\r\n1. Register your application with Azure AD.\r\n2. Install & Configure ADAL.\r\n3. Use ADAL to get tokens from Azure AD.\r\n\r\nTo get started, [download the completed sample](https://github.com/AzureADQuickStarts/NativeClient-iOS/archive/complete.zip).  You'll also need an Azure AD tenant in which you can create users and register an application.  If you don't already have a tenant, [learn how to get one](active-directory-howto-tenant.md).\r\n\r\n## *1. Determine what your Redirect URI will be for iOS*\r\n\r\nIn order to securely launch your applications in certain SSO scenarios we require that you create a **Redirect URI** in a particular format. A Redirect URI is used to ensure that the tokens return to the correct application that asked for them.\r\n\r\nThe iOS format for a Redirect URI is:\r\n\r\n```\r\n<app-scheme>://<bundle-id>\r\n```\r\n\r\n- \t**aap-scheme** - This is registered in your XCode project. It is how other applications can call you. You can find this under Info.plist -> URL types -> URL Identifier. You should create one if you don't already have one or more configured.\r\n- \t**bundle-id** - This is the Bundle Identifier found under \"identity\" un your project settings in XCode.\r\n\r\nAn example for this QuickStart code would be: ***msquickstart://com.microsoft.azureactivedirectory.samples.graph.QuickStart***\r\n\r\n## *2. Register the DirectorySearcher Application*\r\nTo enable your app to get tokens, you'll first need to register it in your Azure AD tenant and grant it permission to access the Azure AD Graph API:\r\n\r\n1. Sign in to the [Azure portal](https://portal.azure.com).\r\n2. On the top bar, click on your account and under the **Directory** list, choose the Active Directory tenant where you wish to register your application.\r\n3. Click on **More Services** in the left hand nav, and choose **Azure Active Directory**.\r\n4. Click on **App registrations** and choose **Add**.\r\n5. Enter a friendly name for the application, for example 'DirectorySearcher' and select 'Native' as the Application Type. The **Redirect Uri** is a scheme and string combination that Azure AD will use to return token responses.  Enter a value specific to your application based on the information above. Click on **Create** to create the application.\r\n6. While still in the Azure portal, choose your application, click on **Settings** and choose **Properties**.\r\n7. Find the Application ID value and copy it to the clipboard.\r\n8. Configure Permissions for your application - in the Settings menu, choose the 'Required permissions' section, click on **Add**, then **Select an API**, and select 'Microsoft Graph' (this is the Graph API). Then, click on  **Select Permissions** and select 'Read Directory Data'.\r\n\r\n\r\n## *3. Install & Configure ADAL*\r\nNow that you have an application in Azure AD, you can install ADAL and write your identity-related code.  In order for ADAL to be able to communicate with Azure AD, you need to provide it with some information about your app registration.\r\n-\tBegin by adding ADAL to the DirectorySearcher project using Cocapods.\r\n\r\n```\r\n$ vi Podfile\r\n```\r\nAdd the following to this podfile:\r\n\r\n```\r\nsource 'https://github.com/CocoaPods/Specs.git'\r\nlink_with ['QuickStart']\r\nxcodeproj 'QuickStart'\r\n\r\npod 'ADALiOS'\r\n```\r\n\r\nNow load the podfile using cocoapods. This will create a new XCode Workspace you will load.\r\n\r\n```\r\n$ pod install\r\n...\r\n$ open QuickStart.xcworkspace\r\n```\r\n\r\n-\tIn the QuickStart project, open the plist file `settings.plist`.  Replace the values of the elements in the section to reflect the values you input into the Azure Portal.  Your code will reference these values whenever it uses ADAL.\r\n    -\tThe `tenant` is the domain of your Azure AD tenant, e.g. contoso.onmicrosoft.com\r\n    -\tThe `clientId` is the clientId of your application you copied from the portal.\r\n    -\tThe `redirectUri` is the redirect url you registered in the portal.\r\n\r\n## *4.\tUse ADAL to Get Tokens from AAD*\r\nThe basic principle behind ADAL is that whenever your app needs an access token, it simply calls a completionBlock `+(void) getToken : `, and ADAL does the rest.  \r\n\r\n-\tIn the `QuickStart` project, open `GraphAPICaller.m` and locate the `// TODO: getToken for generic Web API flows. Returns a token with no additional parameters provided.` comment near the top.  This is where you pass ADAL the coordinates through a CompletionBlock to communicate with Azure AD and tell it how to cache tokens.\r\n\r\n```ObjC\r\n+(void) getToken : (BOOL) clearCache\r\n           parent:(UIViewController*) parent\r\ncompletionHandler:(void (^) (NSString*, NSError*))completionBlock;\r\n{\r\n    AppData* data = [AppData getInstance];\r\n    if(data.userItem){\r\n        completionBlock(data.userItem.accessToken, nil);\r\n        return;\r\n    }\r\n\r\n    ADAuthenticationError *error;\r\n    authContext = [ADAuthenticationContext authenticationContextWithAuthority:data.authority error:&error];\r\n    authContext.parentController = parent;\r\n    NSURL *redirectUri = [[NSURL alloc]initWithString:data.redirectUriString];\r\n\r\n    [ADAuthenticationSettings sharedInstance].enableFullScreen = YES;\r\n    [authContext acquireTokenWithResource:data.resourceId\r\n                                 clientId:data.clientId\r\n                              redirectUri:redirectUri\r\n                           promptBehavior:AD_PROMPT_AUTO\r\n                                   userId:data.userItem.userInformation.userId\r\n                     extraQueryParameters: @\"nux=1\" // if this strikes you as strange it was legacy to display the correct mobile UX. You most likely won't need it in your code.\r\n                          completionBlock:^(ADAuthenticationResult *result) {\r\n\r\n                              if (result.status != AD_SUCCEEDED)\r\n                              {\r\n                                  completionBlock(nil, result.error);\r\n                              }\r\n                              else\r\n                              {\r\n                                  data.userItem = result.tokenCacheStoreItem;\r\n                                  completionBlock(result.tokenCacheStoreItem.accessToken, nil);\r\n                              }\r\n                          }];\r\n}\r\n\r\n```\r\n\r\n- Now we need to use this token to search for users in the graph. Find the `// TODO: implement SearchUsersList` commentThis method makes a GET request to the Azure AD Graph API to query for users whose UPN begins with the given search term.  But in order to query the Graph API, you need to include an access_token in the `Authorization` header of the request - this is where ADAL comes in.\r\n\r\n```ObjC\r\n+(void) searchUserList:(NSString*)searchString\r\n                parent:(UIViewController*) parent\r\n       completionBlock:(void (^) (NSMutableArray* Users, NSError* error)) completionBlock\r\n{\r\n    if (!loadedApplicationSettings)\r\n    {\r\n        [self readApplicationSettings];\r\n    }\r\n\r\n    AppData* data = [AppData getInstance];\r\n\r\n    NSString *graphURL = [NSString stringWithFormat:@\"%@%@/users?api-version=%@&$filter=startswith(userPrincipalName, '%@')\", data.taskWebApiUrlString, data.tenant, data.apiversion, searchString];\r\n\r\n\r\n    [self craftRequest:[self.class trimString:graphURL]\r\n                parent:parent\r\n     completionHandler:^(NSMutableURLRequest *request, NSError *error) {\r\n\r\n         if (error != nil)\r\n         {\r\n             completionBlock(nil, error);\r\n         }\r\n         else\r\n         {\r\n\r\n             NSOperationQueue *queue = [[NSOperationQueue alloc]init];\r\n\r\n             [NSURLConnection sendAsynchronousRequest:request queue:queue completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {\r\n\r\n                 if (error == nil && data != nil){\r\n\r\n                     NSDictionary *dataReturned = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];\r\n\r\n                     // We can grab the top most JSON node to get our graph data.\r\n                     NSArray *graphDataArray = [dataReturned objectForKey:@\"value\"];\r\n\r\n                     // Don't be thrown off by the key name being \"value\". It really is the name of the\r\n                     // first node. :-)\r\n\r\n                     //each object is a key value pair\r\n                     NSDictionary *keyValuePairs;\r\n                     NSMutableArray* Users = [[NSMutableArray alloc]init];\r\n\r\n                     for(int i =0; i < graphDataArray.count; i++)\r\n                     {\r\n                         keyValuePairs = [graphDataArray objectAtIndex:i];\r\n\r\n                         User *s = [[User alloc]init];\r\n                         s.upn = [keyValuePairs valueForKey:@\"userPrincipalName\"];\r\n                         s.name =[keyValuePairs valueForKey:@\"givenName\"];\r\n\r\n                         [Users addObject:s];\r\n                     }\r\n\r\n                     completionBlock(Users, nil);\r\n                 }\r\n                 else\r\n                 {\r\n                     completionBlock(nil, error);\r\n                 }\r\n\r\n             }];\r\n         }\r\n     }];\r\n\r\n}\r\n\r\n```\r\n- When your app requests a token by calling `getToken(...)`, ADAL will attempt to return a token without asking the user for credentials.  If ADAL determines that the user needs to sign in to get a token, it will display a login dialog, collect the user's credentials, and return a token upon successful authentication.  If ADAL is unable to return a token for any reason, it will throw an `AdalException`.\r\n- Notice that the `AuthenticationResult` object contains a `tokenCacheStoreItem` object that can be used to collect information your app may need.  In the QuickStart, `tokenCacheStoreItem` is used to determine if authenitcation has already occurred.\r\n\r\n\r\n## Step 5: Build and Run the application\r\n\r\n\r\n\r\nCongratulations! You now have a working iOS application that has the ability to authenticate users, securely call Web APIs using OAuth 2.0, and get basic information about the user.  If you haven't already, now is the time to populate your tenant with some users.  Run your QuickStart app, and sign in with one of those users.  Search for other users based on their UPN.  Close the app, and re-run it.  Notice how the user's session remains intact.\r\n\r\nADAL makes it easy to incorporate all of these common identity features into your application.  It takes care of all the dirty work for you - cache management, OAuth protocol support, presenting the user with a login UI, refreshing expired tokens, and more.  All you really need to know is a single API call, `getToken`.\r\n\r\nFor reference, the completed sample (without your configuration values) is provided [here](https://github.com/AzureADQuickStarts/NativeClient-iOS/archive/complete.zip).  You can now move on to additional scenarios.  You may want to try:\r\n\r\n[Secure a Node.JS Web API with Azure AD >>](active-directory-devquickstarts-webapi-nodejst.md)\r\n\r\nFor additional resources, check out:\r\n- [AzureADSamples on GitHub >>](https://github.com/AzureAdSamples)\r\n- [CloudIdentity.com >>](https://cloudidentity.com)\r\n- Azure AD documentation on [Azure.com >>](http://azure.microsoft.com/documentation/services/active-directory/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}